<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

<!--
	DevForce 2010 
 
		DevForce adds a custom post-build target to generate metadata for Code First models.
		The task runs only if a project references DevForce and a "marker" *.cf file is present in the project.
		
		You can disable this task altogether by either uncommenting the <SkipDevForce> property below,
		or adding a <SkipDevForce> property to your project file to disable the task on a project basis.

-->

	<!-- Allow user overrides ... -->
	<Import Project="IdeaBlade.Override.targets" Condition="Exists('IdeaBlade.Override.targets')"/>


	<UsingTask TaskName="IdeaBlade.VisualStudio.Build.Tasks.EntityModelMetadataDeploy" 
						 AssemblyFile="IdeaBlade.VisualStudio.Build.Tasks.dll" />

	<PropertyGroup>
		<!-- <SkipDevForce>true</SkipDevForce>  -->
		<TryDevForceDeploy Condition="'$(SkipDevForce)' != 'true'">true</TryDevForceDeploy>
	</PropertyGroup>


	<!-- Inject DevForce -->
	<PropertyGroup Condition="'$(TryDevForceDeploy)' == 'true' ">

		<!-- DevForce is injected into CoreBuild target to run after other CoreBuild tasks -->
		<CoreBuildDependsOn>
			$(CoreBuildDependsOn);
			DevForceEntityModelMetadataDeploy;
		</CoreBuildDependsOn>

	</PropertyGroup>

	<!-- Inspect for any references to DevForce.
			 We do this to short-circuit any further DevForce-specific processing.
			 EntityModelMetadataDeploy won't be performed on a project if these
			 references aren't found.
			 -->
	<Target Name="DevForceInspectReferences" 
					Condition="'$(TryDevForceDeploy)' == 'true' "
          Returns="$(HasAnyIBReferences)">

		<!-- Inspect standard references via Reference.Identity -->
		<CreateProperty Condition=" '$(_IBReference)' == '' AND ( 
							'%(Reference.Identity)' == 'IdeaBlade.Aop, Version=7.0.0.0, Culture=neutral, PublicKeyToken=287b5094865421c0, processorArchitecture=MSIL' 
					 OR '%(Reference.Identity)' == 'IdeaBlade.Aop, Version=7.0.0.0, Culture=neutral, PublicKeyToken=287b5094865421c0' 
					 OR '%(Reference.Identity)' == 'IdeaBlade.Aop' 
					 )"
							Value="%(Reference.Identity)">
			<Output TaskParameter="Value" PropertyName="_IBReference" />
		</CreateProperty>

		<!-- Inspect standard references via ReferencePath.FusionName -->
		<CreateProperty Condition="'$(_IBReference)' == '' AND ( 
							'%(ReferencePath.FusionName)' == 'IdeaBlade.Aop, Version=7.0.0.0, Culture=neutral, PublicKeyToken=287b5094865421c0' 
					 OR '%(ReferencePath.FusionName)' == 'IdeaBlade.Aop'
					 )"
							Value="%(ReferencePath.FusionName)">
			<Output TaskParameter="Value" PropertyName="_IBReference" />
		</CreateProperty>

		<!-- Inspect standard references via ReferencePath.FileName -->
		<CreateProperty Condition="'$(_IBReference)' == '' AND ('%(ReferencePath.FileName)' == 'IdeaBlade.Aop')"
							Value="%(ReferencePath.FileName)">
			<Output TaskParameter="Value" PropertyName="_IBReference" />
		</CreateProperty>

		 <!-- Inspect project references -->
		 <CreateProperty Condition="'$(_IBReference)' == '' AND ('%(ProjectReference.Name)'=='IdeaBlade.Aop')"
										 Value="%(ProjectReference.Name)">
			 <Output TaskParameter="Value" PropertyName="_IBReference" />
		</CreateProperty>

		<Message Text="DevForce reference in project: $(_IBReference)" Importance="low" />
    
    <CreateProperty Condition="'$(_IBReference)' != '' " Value="true">
      <Output TaskParameter="Value" PropertyName="HasAnyIBReferences" />
    </CreateProperty>
    
    <Message Text="Has IB references: $(HasAnyIBReferences)" Importance="low" />
	</Target>
 

  <Target Name="DevForceEntityModelMetadataDeployDependsOn"
					Condition="'$(TryDevForceDeploy)' == 'true' ">

    <ItemGroup >
      <IbmmxMarker Include=".\**\*.cf" />
    </ItemGroup>

    <CallTarget Condition="'@(IbmmxMarker)' != '' "
                Targets="DevForceInspectReferences"
                />
  </Target>


  <!-- Get EntityModelMetadata for any contained CF model and create *.ibmmx file(s).
			 These files will be included in the project as embedded resources.  
			 If a linked SL project is found the file(s) will be embedded there too.
			 -->

  <Target Name="DevForceEntityModelMetadataDeploy" 
          DependsOnTargets="DevForceEntityModelMetadataDeployDependsOn"
          Condition="'$(TryDevForceDeploy)' == 'true'">
          
    <EntityModelMetadataDeploy Condition="'$(HasAnyIBReferences)' == 'true' "
      Assembly="$(TargetPath)"
      ProjectFile="$(MSBuildProjectFullPath)"
      TargetFolder="$(MSBuildProjectDirectory)"
			 >
      <Output TaskParameter="ModelMetadataResources" ItemName="ModelMetadata" />
      <Output TaskParameter="HasMetadataChanges" PropertyName="MetadataChanged" />
      <Output TaskParameter="LinkedSilverlightProjects" ItemName="LinkedProjects" />
    </EntityModelMetadataDeploy>

    <Message Text="Model metadata changes: $(MetadataChanged)" Importance="low" />
    <Message Text="Linked sl projects: @(LinkedProjects)" Importance="low" />

    <!-- If changed, rebuild the project now so the user won't have to.  -->
    <MSBuild Condition="'$(MetadataChanged)' == 'true' "
      Projects="$(MSBuildProjectFullPath)"
      Targets="CoreBuild"
      Properties="SkipDevForce=true" >
    </MSBuild>

  </Target>

</Project>
