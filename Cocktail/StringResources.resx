<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BootstrapperAlreadyExists" xml:space="preserve">
    <value>There's already an instance of a bootstrapper. Only one instance per application can be created.</value>
  </data>
  <data name="BootstrapperMustNotBeDecoratedWithExports" xml:space="preserve">
    <value>Bootstrapper classes or any of its members must not be decorated with the [Export] attribute</value>
  </data>
  <data name="MissingRequiredProbeAssemblies" xml:space="preserve">
    <value>One or more required assemblies were not probed. Did you modify IdeaBladeConfig.Instance.ProbeAssemblyNames? The following assemblies must be probed: {0}</value>
  </data>
  <data name="ThePersistenceLayerFailedToInitialize" xml:space="preserve">
    <value>The persistence layer failed to initialize</value>
  </data>
  <data name="UnableToObtainUserCredential" xml:space="preserve">
    <value>Unable to obtain user credential</value>
  </data>
  <data name="InvalidPassword" xml:space="preserve">
    <value>Invalid Password!</value>
  </data>
  <data name="KeyIsAlreadyPresentInThisDictionary" xml:space="preserve">
    <value>Key is already present in this dictionary</value>
  </data>
  <data name="CouldNotLocateAnyInstancesOfContract" xml:space="preserve">
    <value>Could not locate any instances of contract {0}.</value>
  </data>
  <data name="CompositionHelperIsNotConfigured" xml:space="preserve">
    <value>Composition is not configured. Composition.Configure must be called before any other public method.</value>
  </data>
  <data name="ManagerTriedToFetchData" xml:space="preserve">
    <value>Manager tried to fetch data.</value>
  </data>
  <data name="ManagerTriedToSaveData" xml:space="preserve">
    <value>Manager tried to save data.</value>
  </data>
  <data name="TheEntityManagerProviderHasNotBeenInitialized" xml:space="preserve">
    <value>The EntityManagerProvider hasn't been initialized. Please make sure to call EntityManagerProvider.Initialize before executing the first query</value>
  </data>
  <data name="ProbedForIValidationErrorNotificationAndFoundNoMatch" xml:space="preserve">
    <value>Probed for IValidationErrorNotification and found no matching exports. Will be throwing an exception if validation errors occur.</value>
  </data>
  <data name="ProbedForIValidationErrorNotificationAndFoundMatch" xml:space="preserve">
    <value>Probed for IValidationErrorNotification and found {0} matchting exports.</value>
  </data>
  <data name="NoEntityManagerProviderFound" xml:space="preserve">
    <value>No EntityManagerProvider found.</value>
  </data>
  <data name="TheEntityManagerProviderIsNotReturningValidEntityManager" xml:space="preserve">
    <value>The EntityManagerProvider is not returning a valid EntityManager. Please check the implementation.</value>
  </data>
  <data name="DefaultPasswordSalt" xml:space="preserve">
    <value>unlock leaven fox octave fierce embalm navel jollily vessel chisel ramp Susan faded toe</value>
  </data>
  <data name="CouldNotDetermineTypeNameOfInstance" xml:space="preserve">
    <value>Could not determine type name of instance</value>
  </data>
  <data name="ProbedForServiceAndFoundMultipleMatches" xml:space="preserve">
    <value>Probed for service with contract {0} and found multiple matching exports</value>
  </data>
  <data name="ProbedForServiceAndFoundMatch" xml:space="preserve">
    <value>Probed for service with contract {0} and found {1}</value>
  </data>
  <data name="ProbedForServiceFoundNoMatch" xml:space="preserve">
    <value>Probed for service with contract {0} and found no matching exports</value>
  </data>
  <data name="ThisEntityManagerIsCurrentlyBusyWithAPreviousSaveChangeAsync" xml:space="preserve">
    <value>This EntityManager is currently busy with a previous SaveChangeAsync call.</value>
  </data>
  <data name="CreatingEntityManagerDuringRecompositionNotAllowed" xml:space="preserve">
    <value>Creating an EntityManager during recomposition is not allowed.</value>
  </data>
  <data name="ProbedForEntityManagerDelegateAndFoundMatch" xml:space="preserve">
    <value>Probed for EntityManagerDelegate and found {0} matchting exports.</value>
  </data>
  <data name="ProbedForEntityManagerDelegateAndFoundNoMatch" xml:space="preserve">
    <value>Probed for EntityManagerDelegate and found no matchting exports.</value>
  </data>
  <data name="InvalidUseOfExpiredEntityManager" xml:space="preserve">
    <value>Invalid use of expired EntityManager. The application's principal has changed since this EntityManager was last used. Tip: Do not keep references to EntityManagers. Instead, always obtain the current EntityManager through IEntityManagerProvider&lt;T&gt;.Manager.</value>
  </data>
</root>